// Code generated by protoc-gen-go. DO NOT EDIT.
// source: middleware/middleware_test/echo_server.proto

package middleware_test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	Body                 []byte   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_812daae5e8bfec37, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Msg)(nil), "middleware.Msg")
}

func init() {
	proto.RegisterFile("middleware/middleware_test/echo_server.proto", fileDescriptor_812daae5e8bfec37)
}

var fileDescriptor_812daae5e8bfec37 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc9, 0xcd, 0x4c, 0x49,
	0xc9, 0x49, 0x2d, 0x4f, 0x2c, 0x4a, 0xd5, 0x47, 0x30, 0xe3, 0x4b, 0x52, 0x8b, 0x4b, 0xf4, 0x53,
	0x93, 0x33, 0xf2, 0xe3, 0x8b, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0xb8, 0x10, 0x4a, 0x94, 0x24, 0xb9, 0x98, 0x7d, 0x8b, 0xd3, 0x85, 0x84, 0xb8, 0x58, 0x92,
	0xf2, 0x53, 0x2a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x23, 0x7b, 0x2e, 0x2e,
	0xd7, 0xe4, 0x8c, 0xfc, 0x60, 0xb0, 0x56, 0x21, 0x43, 0x2e, 0xf6, 0x80, 0xa2, 0xfc, 0xe4, 0xd4,
	0xe2, 0x62, 0x21, 0x7e, 0x3d, 0x84, 0x01, 0x7a, 0xbe, 0xc5, 0xe9, 0x52, 0xe8, 0x02, 0x4a, 0x0c,
	0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0x96, 0x51, 0xe6, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9,
	0xf9, 0xb9, 0xfa, 0xe5, 0xa9, 0x89, 0x65, 0xa9, 0xe5, 0xf9, 0x45, 0xd9, 0xc5, 0xfa, 0xc9, 0xf9,
	0xb9, 0xb9, 0xf9, 0x79, 0xfa, 0xb8, 0x1d, 0x9d, 0xc4, 0x06, 0x76, 0xa9, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0x2c, 0xc1, 0xca, 0xd9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServerClient is the client API for EchoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServerClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (EchoServer_ProcessClient, error)
}

type echoServerClient struct {
	cc *grpc.ClientConn
}

func NewEchoServerClient(cc *grpc.ClientConn) EchoServerClient {
	return &echoServerClient{cc}
}

func (c *echoServerClient) Process(ctx context.Context, opts ...grpc.CallOption) (EchoServer_ProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoServer_serviceDesc.Streams[0], "/middleware.EchoServer/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServerProcessClient{stream}
	return x, nil
}

type EchoServer_ProcessClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type echoServerProcessClient struct {
	grpc.ClientStream
}

func (x *echoServerProcessClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServerProcessClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServerServer is the server API for EchoServer service.
type EchoServerServer interface {
	Process(EchoServer_ProcessServer) error
}

// UnimplementedEchoServerServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServerServer struct {
}

func (*UnimplementedEchoServerServer) Process(srv EchoServer_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}

func RegisterEchoServerServer(s *grpc.Server, srv EchoServerServer) {
	s.RegisterService(&_EchoServer_serviceDesc, srv)
}

func _EchoServer_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServerServer).Process(&echoServerProcessServer{stream})
}

type EchoServer_ProcessServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type echoServerProcessServer struct {
	grpc.ServerStream
}

func (x *echoServerProcessServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServerProcessServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "middleware.EchoServer",
	HandlerType: (*EchoServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _EchoServer_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "middleware/middleware_test/echo_server.proto",
}
